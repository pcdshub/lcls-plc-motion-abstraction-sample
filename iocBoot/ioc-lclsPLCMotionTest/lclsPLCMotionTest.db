record(bi, "$(PREFIX)LCLSGeneral:GlobalLogTrickleTrip_RBV") {
  field(DESC, "Tripped by overall log count")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/GVL_Logger.bTrickleTripped?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(waveform, "$(PREFIX)LCLSGeneral:LogHost_RBV") {
  field(DESC, "The log host IP address")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt8ArrayIn")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/GVL_Logger.cLogHost?")
  field(FTVL, "CHAR")
  field(NELM, "15")
  field(MPST, "On Change")
  field(APST, "On Change")
  info(autosaveFields_pass0, "DESC DISS SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(waveform, "$(PREFIX)LCLSGeneral:LogHost") {
  field(DESC, "The log host IP address")
  field(DTYP, "asynInt8ArrayOut")
  field(UDFS, "0")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/GVL_Logger.cLogHost=")
  field(FTVL, "CHAR")
  field(NELM, "15")
  field(MPST, "On Change")
  field(APST, "On Change")
  info(autosaveFields_pass0, "DESC DISS SIMS UDFS VAL")
  info(archive, "VAL")
}

record(longin, "$(PREFIX)LCLSGeneral:LogPort_RBV") {
  field(DESC, "The log host UDP port")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/GVL_Logger.iLogPort?")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(longout, "$(PREFIX)LCLSGeneral:LogPort") {
  field(DESC, "The log host UDP port")
  field(DTYP, "asynInt32")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/GVL_Logger.iLogPort=")
  info(autosaveFields_pass0, "DESC DISS DRVH DRVL HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS VAL")
  info(archive, "VAL")
}

record(longin, "$(PREFIX)LCLSGeneral:LogMessageCount_RBV") {
  field(DESC, "Total log messages on the last cycle")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/GVL_Logger.nGlobAccEvents?")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:SLITX:PLC:bBacklashEnable_RBV") {
  field(DESC, "Enable Backlash compensation")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbBacklashCompensation.bBacklashEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bo, "TST:MOTION:SLITX:PLC:bBacklashEnable") {
  field(DESC, "Enable Backlash compensation")
  field(DTYP, "asynInt32")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.slitX.fbBacklashCompensation.bBacklashEnable=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "COSV DESC DISS OSV SIMS UDFS VAL ZSV")
  info(archive, "VAL")
}

record(bi, "TST:MOTION:SLITX:PLC:bBacklashStatus_RBV") {
  field(DESC, "Backlash compensation status")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbBacklashCompensation.bBacklashStatus?")
  field(ZNAM, "DISABLED")
  field(ONAM, "ENABLED")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:SLITX:PLC:fBacklashComp_RBV") {
  field(DESC, "Backlash compensation")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbBacklashCompensation.fBacklash?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ao, "TST:MOTION:SLITX:PLC:fBacklashComp") {
  field(DESC, "Backlash compensation")
  field(DTYP, "asynFloat64")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.slitX.fbBacklashCompensation.fBacklash=")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS DRVH DRVL HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS VAL")
  info(archive, "VAL")
}

record(ai, "TST:MOTION:SLITX:PLC:fMeasuredBacklashComp_RBV") {
  field(DESC, "Currently applied compensation")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbBacklashCompensation.fCurrentBacklash?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:SLITX:PLC:fRampVelo_RBV") {
  field(DESC, "Backlash compensation Ramp Velocity")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbBacklashCompensation.fRampVelo?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ao, "TST:MOTION:SLITX:PLC:fRampVelo") {
  field(DESC, "Backlash compensation Ramp Velocity")
  field(DTYP, "asynFloat64")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.slitX.fbBacklashCompensation.fRampVelo=")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS DRVH DRVL HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS VAL")
  info(archive, "VAL")
}

record(longin, "TST:MOTION:SLITX:PLC:nEncoderCount_RBV") {
  field(DESC, "Count from encoder hardware")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbEncoderScaling.nEncoderCount?")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:SLITX:PLC:bHardwareEnable_RBV") {
  field(DESC, "TRUE if STO not hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbMotionInterlocksCommon.bHardwareEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:SLITX:PLC:bUserEnable_RBV") {
  # Used to disable power entirely for an axis
  field(DESC, "Used to disable powe...irely for an axis")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbMotionInterlocksCommon.bUserEnable?")
  field(ZNAM, "DISABLE")
  field(ONAM, "ENABLE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bo, "TST:MOTION:SLITX:PLC:bUserEnable") {
  # Used to disable power entirely for an axis
  field(DESC, "Used to disable powe...irely for an axis")
  field(DTYP, "asynInt32")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.slitX.fbMotionInterlocksCommon.bUserEnable=")
  field(ZNAM, "DISABLE")
  field(ONAM, "ENABLE")
  info(autosaveFields_pass0, "COSV DESC DISS OSV SIMS UDFS VAL ZSV")
  info(archive, "VAL")
}

record(longin, "TST:MOTION:SLITX:PLC:AxisPar:PosLagEn_RBV") {
  # TRUE if position lag monitor (also known as stall monitor) is enabled.
  field(DESC, "TRUE if position lag...itor) is enabled.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbReadParameter.stAxisParametersExposed.bCtrlEnablePosDiffControl?")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(longin, "TST:MOTION:SLITX:PLC:AxisPar:SLimMaxEn_RBV") {
  # TRUE if controller static maximum limit is enabled.
  field(DESC, "TRUE if controller s...limit is enabled.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbReadParameter.stAxisParametersExposed.bEncEnableSoftEndMaxControl?")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(longin, "TST:MOTION:SLITX:PLC:AxisPar:SLimMinEn_RBV") {
  # TRUE if controller static minimum limit is enabled.
  field(DESC, "TRUE if controller s...limit is enabled.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbReadParameter.stAxisParametersExposed.bEncEnableSoftEndMinControl?")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:SLITX:PLC:AxisPar:MaxAccel_RBV") {
  # Maximum rate of increase in speed of the axis in EU/s^2.
  field(DESC, "Maximum rate of incr...e axis in EU/s^2.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbReadParameter.stAxisParametersExposed.fAccelerationMax?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:SLITX:PLC:AxisPar:PosLagVal_RBV") {
  field(DESC, "Maximum magnitude of position lag in EU.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbReadParameter.stAxisParametersExposed.fCtrlPosDiffMax?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:SLITX:PLC:AxisPar:PosLagTime_RBV") {
  # Maximum allowable duration outside of maximum position lag value in seconds.
  field(DESC, "Maximum allowable du...value in seconds.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbReadParameter.stAxisParametersExposed.fCtrlPosDiffMaxTime?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:SLITX:PLC:AxisPar:MaxDecel_RBV") {
  # Maximum rate of decrease in speed of the axis in EU/s^2.
  field(DESC, "Maximum rate of decr...e axis in EU/s^2.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbReadParameter.stAxisParametersExposed.fDecelerationMax?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:SLITX:PLC:AxisPar:EncOffset_RBV") {
  field(DESC, "Encoder offset in EU.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbReadParameter.stAxisParametersExposed.fEncOffset?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:SLITX:PLC:AxisPar:EncScaling_RBV") {
  # Encoder scaling numerator / denominator in EU/COUNT.
  field(DESC, "Encoder scaling nume...ator in EU/COUNT.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbReadParameter.stAxisParametersExposed.fEncScaleFactorInternal?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:SLITX:PLC:AxisPar:SLimMax_RBV") {
  # Maximum commandable position of the axis in EU.
  field(DESC, "Maximum commandable ...f the axis in EU.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbReadParameter.stAxisParametersExposed.fEncSoftEndMax?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:SLITX:PLC:AxisPar:SLimMin_RBV") {
  # Minimum commandable position of the axis in EU.
  field(DESC, "Minimum commandable ...f the axis in EU.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbReadParameter.stAxisParametersExposed.fEncSoftEndMin?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:SLITX:PLC:AxisPar:MaxVel_RBV") {
  # Maximum commandable speed of the axis in EU/s.
  field(DESC, "Maximum commandable ...the axis in EU/s.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.fbReadParameter.stAxisParametersExposed.fVeloMaximum?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:SLITX:PLC:bHalt_RBV") {
  field(DESC, "Used internally to stop move")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionCommand.bHalt?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bo, "TST:MOTION:SLITX:PLC:bHalt") {
  field(DESC, "Used internally to stop move")
  field(DTYP, "asynInt32")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.slitX.stMotionCommand.bHalt=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "COSV DESC DISS OSV SIMS UDFS VAL ZSV")
  info(archive, "VAL")
}

record(bi, "TST:MOTION:SLITX:PLC:bHomeCmd_RBV") {
  field(DESC, "Start the homing routine")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionCommand.bHomeCmd?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bo, "TST:MOTION:SLITX:PLC:bHomeCmd") {
  field(DESC, "Start the homing routine")
  field(DTYP, "asynInt32")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.slitX.stMotionCommand.bHomeCmd=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "COSV DESC DISS OSV SIMS UDFS VAL ZSV")
  info(archive, "VAL")
}

record(bi, "TST:MOTION:SLITX:PLC:bMoveCmd_RBV") {
  field(DESC, "Start an AbsoluteMove")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionCommand.bMoveCmd?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bo, "TST:MOTION:SLITX:PLC:bMoveCmd") {
  field(DESC, "Start an AbsoluteMove")
  field(DTYP, "asynInt32")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.slitX.stMotionCommand.bMoveCmd=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "COSV DESC DISS OSV SIMS UDFS VAL ZSV")
  info(archive, "VAL")
}

record(bi, "TST:MOTION:SLITX:PLC:bReset_RBV") {
  field(DESC, "Used internally to reset errors")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionCommand.bReset?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bo, "TST:MOTION:SLITX:PLC:bReset") {
  field(DESC, "Used internally to reset errors")
  field(DTYP, "asynInt32")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.slitX.stMotionCommand.bReset=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "COSV DESC DISS OSV SIMS UDFS VAL ZSV")
  info(archive, "VAL")
}

record(ai, "TST:MOTION:SLITX:PLC:fAcceleration_RBV") {
  # Used internally and by the IOC to pick a move acceleration
  field(DESC, "Used internally and ...move acceleration")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionCommand.fAcceleration?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ao, "TST:MOTION:SLITX:PLC:fAcceleration") {
  # Used internally and by the IOC to pick a move acceleration
  field(DESC, "Used internally and ...move acceleration")
  field(DTYP, "asynFloat64")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.slitX.stMotionCommand.fAcceleration=")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS DRVH DRVL HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS VAL")
  info(archive, "VAL")
}

record(ai, "TST:MOTION:SLITX:PLC:fDeceleration_RBV") {
  # Used internally and by the IOC to pick a move deceleration
  field(DESC, "Used internally and ...move deceleration")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionCommand.fDeceleration?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ao, "TST:MOTION:SLITX:PLC:fDeceleration") {
  # Used internally and by the IOC to pick a move deceleration
  field(DESC, "Used internally and ...move deceleration")
  field(DTYP, "asynFloat64")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.slitX.stMotionCommand.fDeceleration=")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS DRVH DRVL HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS VAL")
  info(archive, "VAL")
}

record(ai, "TST:MOTION:SLITX:PLC:fHomePosition_RBV") {
  # Used internally and by the IOC to pick home position
  field(DESC, "Used internally and ...ick home position")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionCommand.fHomePosition?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ao, "TST:MOTION:SLITX:PLC:fHomePosition") {
  # Used internally and by the IOC to pick home position
  field(DESC, "Used internally and ...ick home position")
  field(DTYP, "asynFloat64")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.slitX.stMotionCommand.fHomePosition=")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS DRVH DRVL HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS VAL")
  info(archive, "VAL")
}

record(ai, "TST:MOTION:SLITX:PLC:fJerk_RBV") {
  # Used internally and by the IOC to pick a move jerk
  field(DESC, "Used internally and ... pick a move jerk")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionCommand.fJerk?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ao, "TST:MOTION:SLITX:PLC:fJerk") {
  # Used internally and by the IOC to pick a move jerk
  field(DESC, "Used internally and ... pick a move jerk")
  field(DTYP, "asynFloat64")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.slitX.stMotionCommand.fJerk=")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS DRVH DRVL HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS VAL")
  info(archive, "VAL")
}

record(ai, "TST:MOTION:SLITX:PLC:fPosition_RBV") {
  # Used internally and by the IOC to pick a destination for the move
  field(DESC, "Used internally and ...tion for the move")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionCommand.fPosition?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ao, "TST:MOTION:SLITX:PLC:fPosition") {
  # Used internally and by the IOC to pick a destination for the move
  field(DESC, "Used internally and ...tion for the move")
  field(DTYP, "asynFloat64")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.slitX.stMotionCommand.fPosition=")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS DRVH DRVL HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS VAL")
  info(archive, "VAL")
}

record(ai, "TST:MOTION:SLITX:PLC:fVelocity_RBV") {
  # Used internally and by the IOC to pick a move velocity
  field(DESC, "Used internally and ...k a move velocity")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionCommand.fVelocity?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ao, "TST:MOTION:SLITX:PLC:fVelocity") {
  # Used internally and by the IOC to pick a move velocity
  field(DESC, "Used internally and ...k a move velocity")
  field(DTYP, "asynFloat64")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.slitX.stMotionCommand.fVelocity=")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS DRVH DRVL HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS VAL")
  info(archive, "VAL")
}

record(longin, "TST:MOTION:SLITX:PLC:nCmdData_RBV") {
  # Used internally and by the IOC to pass additional data to some commands
  field(DESC, "Used internally and ... to some commands")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionCommand.nCmdData?")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(longout, "TST:MOTION:SLITX:PLC:nCmdData") {
  # Used internally and by the IOC to pass additional data to some commands
  field(DESC, "Used internally and ... to some commands")
  field(DTYP, "asynInt32")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.slitX.stMotionCommand.nCmdData=")
  info(autosaveFields_pass0, "DESC DISS DRVH DRVL HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS VAL")
  info(archive, "VAL")
}

record(longin, "TST:MOTION:SLITX:PLC:nCommand_RBV") {
  # Used internally and by the IOC to pick what kind of move to do
  field(DESC, "Used internally and ...ind of move to do")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionCommand.nCommand?")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(longout, "TST:MOTION:SLITX:PLC:nCommand") {
  # Used internally and by the IOC to pick what kind of move to do
  field(DESC, "Used internally and ...ind of move to do")
  field(DTYP, "asynInt32")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.slitX.stMotionCommand.nCommand=")
  info(autosaveFields_pass0, "DESC DISS DRVH DRVL HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS VAL")
  info(archive, "VAL")
}

record(bi, "TST:MOTION:SLITX:PLC:AxisStatus:PLC:bBusy_RBV") {
  field(DESC, "TRUE if in the middle of a command")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/TS_MS=10/MAIN.slitX.stMotionStatus.bBusy?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:SLITX:PLC:AxisStatus:PLC:bDone_RBV") {
  field(DESC, "TRUE if we")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionStatus.bDone?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:SLITX:PLC:AxisStatus:PLC:bEnabled_RBV") {
  field(DESC, "Error code if nonzero")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/TS_MS=10/MAIN.slitX.stMotionStatus.bEnabled?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:SLITX:PLC:AxisStatus:PLC:bError_RBV") {
  field(DESC, "TRUE if we are in an error state")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/TS_MS=10/MAIN.slitX.stMotionStatus.bError?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:SLITX:PLC:AxisStatus:PLC:bHomeSensor_RBV") {
  field(DESC, "Error code if nonzero")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionStatus.bHomeSensor?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:SLITX:PLC:AxisStatus:PLC:bHomed_RBV") {
  # TRUE if the motor has been homed, or does not need to be homed
  field(DESC, "TRUE if the motor ha... need to be homed")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/TS_MS=10/MAIN.slitX.stMotionStatus.bHomed?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:SLITX:PLC:AxisStatus:PLC:bLimitBwd_RBV") {
  field(DESC, "Error code if nonzero")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionStatus.bLimitBwd?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:SLITX:PLC:AxisStatus:PLC:bLimitFwd_RBV") {
  field(DESC, "Error code if nonzero")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionStatus.bLimitFwd?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:SLITX:PLC:AxisStatus:PLC:bWarning_RBV") {
  field(DESC, "Interlocks Warning")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionStatus.bWarning?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:SLITX:PLC:AxisStatus:PLC:fActDiff_RBV") {
  field(DESC, "Error code if nonzero")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/TS_MS=10/MAIN.slitX.stMotionStatus.fActDiff?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:SLITX:PLC:AxisStatus:PLC:fActPosition_RBV") {
  field(DESC, "Error code if nonzero")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionStatus.fActPosition?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:SLITX:PLC:AxisStatus:PLC:fActVelocity_RBV") {
  field(DESC, "Error code if nonzero")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionStatus.fActVelocity?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:SLITX:PLC:AxisStatus:PLC:fOverride_RBV") {
  field(DESC, "Used internally to set power override")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionStatus.fOverride?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(longin, "TST:MOTION:SLITX:PLC:AxisStatus:PLC:nErrorId_RBV") {
  field(DESC, "Error code if nonzero")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/TS_MS=10/MAIN.slitX.stMotionStatus.nErrorId?")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(longin, "TST:MOTION:SLITX:PLC:AxisStatus:PLC:nMotionAxisID_RBV") {
  # Unique ID assigned to each axis in the NC
  field(DESC, "Unique ID assigned t...ch axis in the NC")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.slitX.stMotionStatus.nMotionAxisID?")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(waveform, "TST:MOTION:SLITX:PLC:AxisStatus:PLC:sErrorMessage_RBV") {
  field(DESC, "Message to identify the error state")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt8ArrayIn")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/TS_MS=10/MAIN.slitX.stMotionStatus.sErrorMessage?")
  field(FTVL, "CHAR")
  field(NELM, "80")
  field(MPST, "On Change")
  field(APST, "On Change")
  info(autosaveFields_pass0, "DESC DISS SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}