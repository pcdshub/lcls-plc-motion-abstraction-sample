record(bi, "$(PREFIX)LCLSGeneral:GlobalLogTrickleTrip_RBV") {
  field(DESC, "Tripped by overall log count")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/GVL_Logger.bTrickleTripped?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(waveform, "$(PREFIX)LCLSGeneral:LogHost_RBV") {
  field(DESC, "The log host IP address")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt8ArrayIn")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/GVL_Logger.cLogHost?")
  field(FTVL, "CHAR")
  field(NELM, "15")
  field(MPST, "On Change")
  field(APST, "On Change")
  info(autosaveFields_pass0, "DESC DISS SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(waveform, "$(PREFIX)LCLSGeneral:LogHost") {
  field(DESC, "The log host IP address")
  field(DTYP, "asynInt8ArrayOut")
  field(UDFS, "0")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/GVL_Logger.cLogHost=")
  field(FTVL, "CHAR")
  field(NELM, "15")
  field(MPST, "On Change")
  field(APST, "On Change")
  info(autosaveFields_pass0, "DESC DISS SIMS UDFS VAL")
  info(archive, "VAL")
}

record(longin, "$(PREFIX)LCLSGeneral:LogPort_RBV") {
  field(DESC, "The log host UDP port")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/GVL_Logger.iLogPort?")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(longout, "$(PREFIX)LCLSGeneral:LogPort") {
  field(DESC, "The log host UDP port")
  field(DTYP, "asynInt32")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/GVL_Logger.iLogPort=")
  info(autosaveFields_pass0, "DESC DISS DRVH DRVL HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS VAL")
  info(archive, "VAL")
}

record(longin, "$(PREFIX)LCLSGeneral:LogMessageCount_RBV") {
  field(DESC, "Total log messages on the last cycle")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/GVL_Logger.nGlobAccEvents?")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:PLC:bError_RBV") {
  field(DESC, "TRUE if we are in an error state")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/TS_MS=10/MAIN.M1.bError?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:PLC:bReset_RBV") {
  field(DESC, "Used internally to reset errors")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.bReset?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bo, "TST:MOTION:PLC:bReset") {
  field(DESC, "Used internally to reset errors")
  field(DTYP, "asynInt32")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M1.bReset=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "COSV DESC DISS OSV SIMS UDFS VAL ZSV")
  info(archive, "VAL")
}

record(ai, "TST:MOTION:PLC:fHomePosition_RBV") {
  # Used internally and by the IOC to pick home position
  field(DESC, "Used internally and ...ick home position")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.M1.fHomePosition?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ao, "TST:MOTION:PLC:fHomePosition") {
  # Used internally and by the IOC to pick home position
  field(DESC, "Used internally and ...ick home position")
  field(DTYP, "asynFloat64")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.M1.fHomePosition=")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS DRVH DRVL HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS VAL")
  info(archive, "VAL")
}

record(longin, "TST:MOTION:PLC:nErrorId_RBV") {
  field(DESC, "Error code if nonzero")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/TS_MS=10/MAIN.M1.nErrorId?")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(waveform, "TST:MOTION:PLC:sErrorMessage_RBV") {
  field(DESC, "Message to identify the error state")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt8ArrayIn")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/TS_MS=10/MAIN.M1.sErrorMessage?")
  field(FTVL, "CHAR")
  field(NELM, "80")
  field(MPST, "On Change")
  field(APST, "On Change")
  info(autosaveFields_pass0, "DESC DISS SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:PLC:bBacklashCompStatus_RBV") {
  field(DESC, "Backlash compensation status")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbBacklashCompensation.bBacklashCompStatus?")
  field(ZNAM, "DISABLED")
  field(ONAM, "ENABLED")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:PLC:bBacklashCompUserEn_RBV") {
  field(DESC, "Enable Backlash compensation")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbBacklashCompensation.bUserEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bo, "TST:MOTION:PLC:bBacklashCompUserEn") {
  field(DESC, "Enable Backlash compensation")
  field(DTYP, "asynInt32")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.fbMotionStage.fbBacklashCompensation.bUserEnable=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "COSV DESC DISS OSV SIMS UDFS VAL ZSV")
  info(archive, "VAL")
}

record(ai, "TST:MOTION:PLC:fBacklashComp_RBV") {
  field(DESC, "Backlash compensation")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbBacklashCompensation.fBacklash?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ao, "TST:MOTION:PLC:fBacklashComp") {
  field(DESC, "Backlash compensation")
  field(DTYP, "asynFloat64")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.fbMotionStage.fbBacklashCompensation.fBacklash=")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS DRVH DRVL HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS VAL")
  info(archive, "VAL")
}

record(ai, "TST:MOTION:PLC:fMeasuredBacklashComp_RBV") {
  field(DESC, "Currently applied compensation")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbBacklashCompensation.fCurrentBacklash?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:PLC:fRampVelo_RBV") {
  field(DESC, "Backlash compensation Ramp Velocity")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbBacklashCompensation.fRampVelo?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ao, "TST:MOTION:PLC:fRampVelo") {
  field(DESC, "Backlash compensation Ramp Velocity")
  field(DTYP, "asynFloat64")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.fbMotionStage.fbBacklashCompensation.fRampVelo=")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS DRVH DRVL HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS VAL")
  info(archive, "VAL")
}

record(longin, "TST:MOTION:PLC:nEncoderCount_RBV") {
  field(DESC, "Count from encoder hardware")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbEncoderScaling.nEncoderCount?")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:PLC:bHardwareEnable_RBV") {
  field(DESC, "TRUE if STO not hit")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbMotionInterlocksCommon.bHardwareEnable?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bi, "TST:MOTION:PLC:bUserEnable_RBV") {
  # Used to disable power entirely for an axis
  field(DESC, "Used to disable powe...irely for an axis")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbMotionInterlocksCommon.bUserEnable?")
  field(ZNAM, "DISABLE")
  field(ONAM, "ENABLE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bo, "TST:MOTION:PLC:bUserEnable") {
  # Used to disable power entirely for an axis
  field(DESC, "Used to disable powe...irely for an axis")
  field(DTYP, "asynInt32")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.fbMotionStage.fbMotionInterlocksCommon.bUserEnable=")
  field(ZNAM, "DISABLE")
  field(ONAM, "ENABLE")
  info(autosaveFields_pass0, "COSV DESC DISS OSV SIMS UDFS VAL ZSV")
  info(archive, "VAL")
}

record(bi, "TST:MOTION:PLC:bHomeCmd_RBV") {
  field(DESC, "Start the homing routine")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbMoveRequest.bHomeCmd?")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "DESC DISS OSV SIMS UDFS ZSV")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(bo, "TST:MOTION:PLC:bHomeCmd") {
  field(DESC, "Start the homing routine")
  field(DTYP, "asynInt32")
  field(UDFS, "0")
  field(OUT, "@asyn($(PORT),0,1)ADSPORT=851/MAIN.fbMotionStage.fbMoveRequest.bHomeCmd=")
  field(ZNAM, "FALSE")
  field(ONAM, "TRUE")
  info(autosaveFields_pass0, "COSV DESC DISS OSV SIMS UDFS VAL ZSV")
  info(archive, "VAL")
}

record(longin, "TST:MOTION:PLC:AxisPar:PosLagEn_RBV") {
  # TRUE if position lag monitor (also known as stall monitor) is enabled.
  field(DESC, "TRUE if position lag...itor) is enabled.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbReadParameter.stAxisParametersExposed.bCtrlEnablePosDiffControl?")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(longin, "TST:MOTION:PLC:AxisPar:SLimMaxEn_RBV") {
  # TRUE if controller static maximum limit is enabled.
  field(DESC, "TRUE if controller s...limit is enabled.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbReadParameter.stAxisParametersExposed.bEncEnableSoftEndMaxControl?")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(longin, "TST:MOTION:PLC:AxisPar:SLimMinEn_RBV") {
  # TRUE if controller static minimum limit is enabled.
  field(DESC, "TRUE if controller s...limit is enabled.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbReadParameter.stAxisParametersExposed.bEncEnableSoftEndMinControl?")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:PLC:AxisPar:MaxAccel_RBV") {
  # Maximum rate of increase in speed of the axis in EU/s^2.
  field(DESC, "Maximum rate of incr...e axis in EU/s^2.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbReadParameter.stAxisParametersExposed.fAccelerationMax?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:PLC:AxisPar:PosLagVal_RBV") {
  field(DESC, "Maximum magnitude of position lag in EU.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbReadParameter.stAxisParametersExposed.fCtrlPosDiffMax?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:PLC:AxisPar:PosLagTime_RBV") {
  # Maximum allowable duration outside of maximum position lag value in seconds.
  field(DESC, "Maximum allowable du...value in seconds.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbReadParameter.stAxisParametersExposed.fCtrlPosDiffMaxTime?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:PLC:AxisPar:MaxDecel_RBV") {
  # Maximum rate of decrease in speed of the axis in EU/s^2.
  field(DESC, "Maximum rate of decr...e axis in EU/s^2.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbReadParameter.stAxisParametersExposed.fDecelerationMax?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:PLC:AxisPar:EncOffset_RBV") {
  field(DESC, "Encoder offset in EU.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbReadParameter.stAxisParametersExposed.fEncOffset?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:PLC:AxisPar:EncScaling_RBV") {
  # Encoder scaling numerator / denominator in EU/COUNT.
  field(DESC, "Encoder scaling nume...ator in EU/COUNT.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbReadParameter.stAxisParametersExposed.fEncScaleFactorInternal?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:PLC:AxisPar:SLimMax_RBV") {
  # Maximum commandable position of the axis in EU.
  field(DESC, "Maximum commandable ...f the axis in EU.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbReadParameter.stAxisParametersExposed.fEncSoftEndMax?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:PLC:AxisPar:SLimMin_RBV") {
  # Minimum commandable position of the axis in EU.
  field(DESC, "Minimum commandable ...f the axis in EU.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbReadParameter.stAxisParametersExposed.fEncSoftEndMin?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}

record(ai, "TST:MOTION:PLC:AxisPar:MaxVel_RBV") {
  # Maximum commandable speed of the axis in EU/s.
  field(DESC, "Maximum commandable ...the axis in EU/s.")
  field(SCAN, "I/O Intr")
  field(PINI, "1")
  field(TSE, "-2")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT),0,1)ADSPORT=851/POLL_RATE=1/MAIN.fbMotionStage.fbReadParameter.stAxisParametersExposed.fVeloMaximum?")
  field(PREC, "3")
  info(autosaveFields_pass0, "DESC DISS HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC SIMS UDFS")
  info(archive, "VAL")
  field(ASG, "NO_WRITE")
}